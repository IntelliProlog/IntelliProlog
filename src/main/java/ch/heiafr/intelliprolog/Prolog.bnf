{
  parserClass="ch.heiafr.intelliprolog.PrologParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Prolog"
  psiImplClassSuffix="Impl"
  psiPackage="ch.heiafr.intelliprolog.psi"
  psiImplPackage="ch.heiafr.intelliprolog.psi.impl"

  elementTypeHolderClass="ch.heiafr.intelliprolog.psi.PrologTypes"
  elementTypeClass="ch.heiafr.intelliprolog.psi.PrologElementType"
  tokenTypeClass="ch.heiafr.intelliprolog.psi.PrologTokenType"

  psiImplUtilClass="ch.heiafr.intelliprolog.psi.impl.PrologPsiUtil"
}

prologFile ::= item_*

private item_ ::= (sentence|COMMENT|CRLF)

sentence ::= (operation|compound|atom) DOT

term ::= (operation|basic_term) //basic_term instead of term to avoid left recursion

basic_term ::= (parenthesized_block|braced_block|list|number|variable|STRING|compound|atom)

operator ::= (UNQUOTED_ATOM|SYMBOLIC_ATOM)

operation ::= (native_binary_operation|native_left_operation)

native_binary_operation ::= basic_term known_binary_operator term

native_left_operation ::= known_left_operator term


atom ::= (
            UNQUOTED_ATOM|
            SYMBOLIC_ATOM|
            QUOTED_ATOM
         )


compound ::= compound_name LPAREN term RPAREN

compound_name ::= (
                    UNQUOTED_COMPOUND_NAME|
                    QUOTED_COMPOUND_NAME
                  ){
                    extends="ch.heiafr.intelliprolog.psi.impl.PrologNamedElementHelperImpl"
                    implements="ch.heiafr.intelliprolog.psi.PrologNamedElement"
                    methods=[getName setName getNameIdentifier]
                  }

list ::= LBRACKET term? RBRACKET

braced_block ::= LBRACE term RBRACE

parenthesized_block ::= LPAREN term RPAREN

number ::= (INTEGER|FLOAT|BIN_NUMBER|OCT_NUMBER|HEX_NUMBER|CHAR_CODE)

variable ::= (ANONYMOUS_VARIABLE|NAMED_VARIABLE)

valid_operator ::= UNQUOTED_ATOM|SYMBOLIC_ATOM


known_binary_operator ::= &valid_operator (
                            '-->'|
                            ':-'|
                            ';'|'|'|
                            '->'|'*->'|
                            ','|
                            '<'|'='|'=..'|
                            '=:='|'=<'|'=='|'=\='|
                            '>'|'>='|'@<'|'@=<'|
                            '@>'|'@>='|'\='|'\=='|
                            'as'|'is'|
                            ':'|
                            '+'|'-'|'/\'|'\/'|'xor'|
                            '*'|'/'|'//'|'div'|'>>'|
                            'mod'|'rem'|'#<'|'#>'|
                            '#='|'#\='|'#<='|'#>='|'#=#'|
                            '#<=>'|'#\<=>'|'#==>'|'#\==>'|
                            '#/\'|'#\/\'|'#\/'|'#\\/'|'##'|'#\'|
                            '**'|
                            '^'|
                            '::'|
                            '^^'|
                            '<<'
                            )



known_left_operator ::= &valid_operator (
                            ':-'|
                            '\+'|
                            '?'|
                            '+'|'-'|'\'|
                            '++'|'--'|
                            '$'|
                            '@'|
                            '::'|
                            '^^'
                            )
