package ch.eif.intelliprolog.repl.runner;

import ch.eif.intelliprolog.PrologFileType;
import com.intellij.ide.util.TreeFileChooser;
import com.intellij.ide.util.TreeFileChooserFactory;
import com.intellij.openapi.options.SettingsEditor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.util.io.FileUtil;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiFile;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;

class PrologRunConfigurable extends SettingsEditor<PrologRunConfiguration> {
    private JPanel myMainPanel;
    private JCheckBox isTrace;
    private TextFieldWithBrowseButton myFileField;

    public PrologRunConfigurable(final Project project) {
        myFileField.getButton().addActionListener(e -> {
            TreeFileChooser fileChooser = TreeFileChooserFactory.getInstance(project).createFileChooser(
                    "Choose Prolog file to consult",
                    null,
                    PrologFileType.INSTANCE,
                    file -> true
            );

            fileChooser.showDialog();
            final PsiFile selectedFile = fileChooser.getSelectedFile();
            final VirtualFile virtualFile = selectedFile == null ? null : selectedFile.getVirtualFile();
            if (virtualFile != null) {
                final String path = FileUtil.toSystemDependentName(virtualFile.getPath());
                myFileField.setText(path);
            }
        });
    }

    @Override
    protected void resetEditorFrom(@NotNull PrologRunConfiguration s) {
        myFileField.setText(FileUtil.toSystemIndependentName(StringUtil.notNullize(s.getPathToSourceFile())));
        isTrace.setSelected(s.getEnableTrace());
    }

    @Override
    protected void applyEditorTo(@NotNull PrologRunConfiguration s) {
        s.setPathToSourceFile(StringUtil.nullize(FileUtil.toSystemIndependentName(myFileField.getText()), true));
        s.setEnableTrace(isTrace.isSelected());
    }

    @NotNull
    @Override
    protected JComponent createEditor() {
        return myMainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myMainPanel = new javax.swing.JPanel();
        myMainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new java.awt.Insets(0, 0, 0, 0), -1, 15));
        final javax.swing.JLabel label1 = new javax.swing.JLabel();
        myMainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myFileField = new com.intellij.openapi.ui.TextFieldWithBrowseButton();
        myMainPanel.add(myFileField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        isTrace = new javax.swing.JCheckBox();
        myMainPanel.add(isTrace, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        myMainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public javax.swing.JComponent $$$getRootComponent$$$() {
        return myMainPanel;
    }
}
